{
    "OpenAI Basic Agent": {
        "prefix": "openai-agent",
        "body": [
            "import { Agent } from '@openai/agents-sdk';",
            "",
            "export class ${1:MyAgent} extends Agent {",
            "    constructor() {",
            "        super({",
            "            name: '${1:MyAgent}',",
            "            instructions: '${2:You are a helpful AI assistant.}',",
            "            model: '${3:gpt-4o}',",
            "            temperature: ${4:0.7}",
            "        });",
            "    }",
            "",
            "    async handleMessage(message: string): Promise<string> {",
            "        try {",
            "            const response = await this.complete(message);",
            "            return response;",
            "        } catch (error) {",
            "            console.error('Error handling message:', error);",
            "            return 'I apologize, but I encountered an error processing your message.';",
            "        }",
            "    }",
            "}"
        ],
        "description": "Create a basic OpenAI agent class"
    },
    "OpenAI Multi-Agent System": {
        "prefix": "openai-multi-agent",
        "body": [
            "import { Agent } from '@openai/agents-sdk';",
            "",
            "export class CoordinatorAgent extends Agent {",
            "    private agents: Map<string, Agent> = new Map();",
            "",
            "    constructor() {",
            "        super({",
            "            name: 'Coordinator',",
            "            instructions: 'You coordinate tasks between multiple specialized agents.',",
            "            model: 'gpt-4o'",
            "        });",
            "    }",
            "",
            "    registerAgent(name: string, agent: Agent): void {",
            "        this.agents.set(name, agent);",
            "    }",
            "",
            "    async delegateTask(task: string, agentName?: string): Promise<string> {",
            "        if (agentName && this.agents.has(agentName)) {",
            "            const agent = this.agents.get(agentName)!;",
            "            return await agent.complete(task);",
            "        }",
            "",
            "        const bestAgent = await this.selectBestAgent(task);",
            "        return await bestAgent.complete(task);",
            "    }",
            "",
            "    private async selectBestAgent(task: string): Promise<Agent> {",
            "        ${1:// Add your agent selection logic here}",
            "        return this.agents.values().next().value;",
            "    }",
            "}"
        ],
        "description": "Create a multi-agent coordination system"
    },
    "ElizaOS Action": {
        "prefix": "eliza-action",
        "body": [
            "import { Action, IAgentRuntime, Memory, State } from '@elizaos/core';",
            "",
            "export const ${1:customAction}: Action = {",
            "    name: '${2:CUSTOM_ACTION}',",
            "    similes: ['${3:perform custom task}', '${4:execute special function}'],",
            "    description: '${5:Performs a custom action based on user input}',",
            "    ",
            "    validate: async (runtime: IAgentRuntime, message: Memory) => {",
            "        const content = message.content?.text?.toLowerCase() || '';",
            "        return content.includes('${6:trigger_word}');",
            "    },",
            "",
            "    handler: async (runtime: IAgentRuntime, message: Memory, state: State) => {",
            "        try {",
            "            const userInput = message.content?.text || '';",
            "            ${7:// Implement your custom logic here}",
            "            const result = await ${8:processCustomTask}(userInput);",
            "            ",
            "            return {",
            "                text: `${9:I've completed your task: \\${result}}`,",
            "                action: '${2:CUSTOM_ACTION}'",
            "            };",
            "        } catch (error) {",
            "            console.error('${2:CUSTOM_ACTION} error:', error);",
            "            return {",
            "                text: '${10:I encountered an error while performing the action.}',",
            "                action: '${2:CUSTOM_ACTION}'",
            "            };",
            "        }",
            "    }",
            "};",
            "",
            "async function ${8:processCustomTask}(input: string): Promise<string> {",
            "    ${11:// Implement your processing logic}",
            "    return `Processed: \\${input}`;",
            "}"
        ],
        "description": "Create a custom ElizaOS action handler"
    },
    "Agent Error Handling": {
        "prefix": "agent-error-handling",
        "body": [
            "try {",
            "    ${1:// Agent operation}",
            "    const result = await ${2:agent.process}(${3:input});",
            "    return result;",
            "} catch (error) {",
            "    console.error('${4:Agent error}:', error);",
            "    ",
            "    ${5:// Handle specific error types}",
            "    if (error instanceof ${6:SpecificError}) {",
            "        return '${7:Specific error response}';",
            "    }",
            "    ",
            "    return '${8:I apologize, but I encountered an error. Please try again.}';",
            "}"
        ],
        "description": "Common error handling pattern for AI agents"
    },
    "Agent Configuration": {
        "prefix": "agent-config",
        "body": [
            "interface AgentConfig {",
            "    name: string;",
            "    model: string;",
            "    temperature: number;",
            "    maxTokens: number;",
            "    systemPrompt: string;",
            "    tools?: string[];",
            "    memory?: boolean;",
            "}",
            "",
            "const defaultConfig: AgentConfig = {",
            "    name: '${1:MyAgent}',",
            "    model: '${2:gpt-4o}',",
            "    temperature: ${3:0.7},",
            "    maxTokens: ${4:1000},",
            "    systemPrompt: '${5:You are a helpful AI assistant.}',",
            "    tools: [${6:'search', 'calculator'}],",
            "    memory: ${7:true}",
            "};",
            "",
            "const config: AgentConfig = {",
            "    ...defaultConfig,",
            "    ...(${8:process.env.AGENT_CONFIG} ? JSON.parse(${8:process.env.AGENT_CONFIG}) : {})",
            "};"
        ],
        "description": "Agent configuration pattern with defaults"
    }
}