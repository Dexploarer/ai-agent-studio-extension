{
    "OpenAI Basic Agent": {
        "prefix": "openai-agent",
        "body": [
            "const { Agent } = require('@openai/agents-sdk');",
            "",
            "class ${1:MyAgent} extends Agent {",
            "    constructor() {",
            "        super({",
            "            name: '${1:MyAgent}',",
            "            instructions: '${2:You are a helpful AI assistant.}',",
            "            model: '${3:gpt-4o}',",
            "            temperature: ${4:0.7}",
            "        });",
            "    }",
            "",
            "    async handleMessage(message) {",
            "        try {",
            "            const response = await this.complete(message);",
            "            return response;",
            "        } catch (error) {",
            "            console.error('Error handling message:', error);",
            "            return 'I apologize, but I encountered an error processing your message.';",
            "        }",
            "    }",
            "}",
            "",
            "module.exports = { ${1:MyAgent} };"
        ],
        "description": "Create a basic OpenAI agent class"
    },
    "ElizaOS Character Startup": {
        "prefix": "eliza-startup",
        "body": [
            "const { startAgent } = require('@elizaos/core');",
            "const character = require('./characters/${1:character}.character.json');",
            "",
            "async function main() {",
            "    console.log('🎭 Starting ${2:Character} character...');",
            "    ",
            "    try {",
            "        await startAgent({",
            "            character,",
            "            modelProvider: '${3:openai}',",
            "            imageModelProvider: '${4:openai}',",
            "            secrets: {",
            "                OPENAI_API_KEY: process.env.OPENAI_API_KEY",
            "            }",
            "        });",
            "        ",
            "        console.log('✅ ${2:Character} started successfully!');",
            "    } catch (error) {",
            "        console.error('❌ Failed to start character:', error);",
            "        process.exit(1);",
            "    }",
            "}",
            "",
            "main().catch(console.error);"
        ],
        "description": "Start an ElizaOS character"
    },
    "Agent Error Handling": {
        "prefix": "agent-error-handling",
        "body": [
            "try {",
            "    ${1:// Agent operation}",
            "    const result = await ${2:agent.process}(${3:input});",
            "    return result;",
            "} catch (error) {",
            "    console.error('${4:Agent error}:', error);",
            "    ",
            "    ${5:// Handle specific error types}",
            "    if (error instanceof ${6:Error}) {",
            "        return '${7:Specific error response}';",
            "    }",
            "    ",
            "    return '${8:I apologize, but I encountered an error. Please try again.}';",
            "}"
        ],
        "description": "Common error handling pattern for AI agents"
    },
    "Agent Logging": {
        "prefix": "agent-logging",
        "body": [
            "const logger = {",
            "    info: (message, data) => console.log(`[INFO] \\${new Date().toISOString()}: \\${message}`, data || ''),",
            "    warn: (message, data) => console.warn(`[WARN] \\${new Date().toISOString()}: \\${message}`, data || ''),",
            "    error: (message, error) => console.error(`[ERROR] \\${new Date().toISOString()}: \\${message}`, error || '')",
            "};",
            "",
            "// Usage",
            "logger.info('${1:Agent initialized}', { agentName: '${2:MyAgent}' });",
            "logger.warn('${3:Warning message}', { context: '${4:additional info}' });",
            "logger.error('${5:Error occurred}', error);"
        ],
        "description": "Structured logging for agent operations"
    },
    "Agent Configuration": {
        "prefix": "agent-config",
        "body": [
            "const defaultConfig = {",
            "    name: '${1:MyAgent}',",
            "    model: '${2:gpt-4o}',",
            "    temperature: ${3:0.7},",
            "    maxTokens: ${4:1000},",
            "    systemPrompt: '${5:You are a helpful AI assistant.}',",
            "    tools: [${6:'search', 'calculator'}],",
            "    memory: ${7:true}",
            "};",
            "",
            "const config = {",
            "    ...defaultConfig,",
            "    ...(${8:process.env.AGENT_CONFIG} ? JSON.parse(${8:process.env.AGENT_CONFIG}) : {})",
            "};"
        ],
        "description": "Agent configuration pattern with defaults"
    },
    "Async Agent Handler": {
        "prefix": "async-agent-handler",
        "body": [
            "async function handle${1:Task}(${2:input}) {",
            "    try {",
            "        ${3:// Validate input}",
            "        if (!${2:input}) {",
            "            throw new Error('${4:Input is required}');",
            "        }",
            "",
            "        ${5:// Process with agent}",
            "        const result = await agent.${6:process}(${2:input});",
            "        ",
            "        ${7:// Return result}",
            "        return {",
            "            success: true,",
            "            data: result,",
            "            timestamp: new Date().toISOString()",
            "        };",
            "    } catch (error) {",
            "        console.error('Handler error:', error);",
            "        return {",
            "            success: false,",
            "            error: error.message,",
            "            timestamp: new Date().toISOString()",
            "        };",
            "    }",
            "}"
        ],
        "description": "Async handler pattern for agent operations"
    }
}