{
    "LangGraph Basic Workflow": {
        "prefix": "langgraph-workflow",
        "body": [
            "from langgraph.graph import StateGraph, START, END",
            "from langgraph.graph.message import add_messages",
            "from langchain_openai import ChatOpenAI",
            "from langgraph.prebuilt import ToolNode",
            "from typing import Annotated",
            "from typing_extensions import TypedDict",
            "",
            "# Define the state",
            "class State(TypedDict):",
            "    messages: Annotated[list, add_messages]",
            "",
            "# Define your tools",
            "tools = [${1:# your tools here}]",
            "tool_node = ToolNode(tools)",
            "model = ChatOpenAI(model='${2:gpt-4o}').bind_tools(tools)",
            "",
            "# Define the function that determines whether to continue or not",
            "def should_continue(state: State):",
            "    messages = state['messages']",
            "    last_message = messages[-1]",
            "    # If there are no tool calls, then we finish",
            "    if not last_message.tool_calls:",
            "        return 'end'",
            "    # Otherwise continue to tools",
            "    return 'tools'",
            "",
            "# Define the function that calls the model",
            "def call_model(state: State):",
            "    messages = state['messages']",
            "    response = model.invoke(messages)",
            "    return {'messages': [response]}",
            "",
            "# Build the graph",
            "workflow = StateGraph(State)",
            "workflow.add_node('agent', call_model)",
            "workflow.add_node('tools', tool_node)",
            "workflow.add_edge(START, 'agent')",
            "workflow.add_conditional_edges(",
            "    'agent',",
            "    should_continue,",
            "    {",
            "        'tools': 'tools',",
            "        'end': END",
            "    }",
            ")",
            "workflow.add_edge('tools', 'agent')",
            "",
            "app = workflow.compile()",
            "",
            "# Usage",
            "response = app.invoke({",
            "    'messages': [('user', '${3:Your message here}')]",
            "})"
        ],
        "description": "Create a LangGraph workflow with tool support (July 2025)"
    },
    "CrewAI Agent": {
        "prefix": "crewai-agent",
        "body": [
            "from crewai import Agent",
            "from langchain_openai import ChatOpenAI",
            "",
            "${1:agent_name} = Agent(",
            "    role='${2:Specialist Role}',",
            "    goal='${3:Achieve specific objectives}',",
            "    backstory='${4:You are an expert with years of experience in your field}',",
            "    verbose=True,",
            "    allow_delegation=${5:False},",
            "    tools=[${6:# Add tools here}],",
            "    max_iter=${7:3},",
            "    memory=True,",
            "    llm=ChatOpenAI(model='${8:gpt-4o}', temperature=${9:0.7})",
            ")"
        ],
        "description": "Create a CrewAI agent with LLM configuration (July 2025)"
    },
    "CrewAI Task": {
        "prefix": "crewai-task",
        "body": [
            "from crewai import Task",
            "",
            "${1:task_name} = Task(",
            "    description='${2:Detailed description of what needs to be accomplished}',",
            "    agent=${3:assigned_agent},",
            "    expected_output='${4:Description of expected output format and content}',",
            "    tools=[${5:# Optional: specific tools for this task}],",
            "    context=[${6:# Optional: context from other tasks}]",
            ")"
        ],
        "description": "Create a CrewAI task"
    },
    "CrewAI Crew": {
        "prefix": "crewai-crew",
        "body": [
            "from crewai import Crew, Process",
            "",
            "${1:crew_name} = Crew(",
            "    agents=[${2:agent1, agent2, agent3}],",
            "    tasks=[${3:task1, task2, task3}],",
            "    process=Process.${4|sequential,hierarchical|},",
            "    verbose=${5:2},",
            "    memory=${6:True}",
            ")",
            "",
            "# Execute the crew",
            "result = ${1:crew_name}.kickoff()"
        ],
        "description": "Create a CrewAI crew"
    },
    "AutoGen Assistant Agent": {
        "prefix": "autogen-agent",
        "body": [
            "from autogen_agentchat.agents import AssistantAgent",
            "from autogen_ext.models.openai import OpenAIChatCompletionClient",
            "",
            "# Initialize model client",
            "model_client = OpenAIChatCompletionClient(model='${1:gpt-4o}')",
            "",
            "${2:agent_name} = AssistantAgent(",
            "    name='${3:AgentName}',",
            "    description='${4:A helpful AI assistant with specific expertise}',",
            "    system_message='${5:You are a helpful AI assistant}',",
            "    model_client=model_client,",
            "    tools=[${6:# Add tools here}]",
            ")"
        ],
        "description": "Create an AutoGen assistant agent (July 2025)"
    },
    "AutoGen Selector Group Chat": {
        "prefix": "autogen-groupchat",
        "body": [
            "from autogen_agentchat.teams import SelectorGroupChat",
            "from autogen_agentchat.conditions import TextMentionTermination, MaxMessageTermination",
            "from autogen_agentchat.ui import Console",
            "from autogen_ext.models.openai import OpenAIChatCompletionClient",
            "",
            "# Set termination conditions",
            "text_termination = TextMentionTermination('TERMINATE')",
            "max_messages = MaxMessageTermination(max_messages=${1:25})",
            "termination = text_termination | max_messages",
            "",
            "# Create selector group chat",
            "team = SelectorGroupChat(",
            "    [${2:planning_agent, web_agent, data_agent}],",
            "    model_client=OpenAIChatCompletionClient(model='${3:gpt-4o-mini}'),",
            "    termination_condition=termination,",
            "    selector_func=${4:None}  # Optional custom selector",
            ")",
            "",
            "# Run the chat",
            "await Console(team.run_stream(task='${5:Your task here}'))"
        ],
        "description": "Create an AutoGen selector group chat (July 2025)"
    },
    "AutoGen Round Robin Chat": {
        "prefix": "autogen-roundrobin",
        "body": [
            "from autogen_agentchat.teams import RoundRobinGroupChat",
            "from autogen_agentchat.conditions import TextMentionTermination",
            "from autogen_agentchat.ui import Console",
            "",
            "# Create termination condition",
            "termination = TextMentionTermination('${1:APPROVE}')",
            "",
            "# Create round robin group chat",
            "group_chat = RoundRobinGroupChat(",
            "    [${2:writer, critic}],",
            "    termination_condition=termination,",
            "    max_turns=${3:12}",
            ")",
            "",
            "# Run the chat stream",
            "stream = group_chat.run_stream(task='${4:Write a short story}')",
            "await Console(stream)"
        ],
        "description": "Create an AutoGen round-robin group chat (July 2025)"
    },
    "SmolAgents Basic Setup": {
        "prefix": "smolagents-basic",
        "body": [
            "from smolagents import CodeAgent, LiteLLMModel",
            "from smolagents.tools import DuckDuckGoSearchTool, PythonInterpreterTool",
            "",
            "# Initialize model",
            "model = LiteLLMModel(model_id=\"${1:gpt-4o}\")",
            "",
            "# Initialize tools",
            "tools = [",
            "    ${2:DuckDuckGoSearchTool()},",
            "    ${3:PythonInterpreterTool()}",
            "]",
            "",
            "# Create agent",
            "agent = CodeAgent(",
            "    tools=tools,",
            "    model=model,",
            "    max_steps=${4:10},",
            "    verbose=${5:True}",
            ")",
            "",
            "# Run task",
            "result = agent.run(\"${6:Your task description here}\")"
        ],
        "description": "Create a basic SmolAgents setup"
    },
    "Pydantic AI Agent": {
        "prefix": "pydantic-ai",
        "body": [
            "from pydantic_ai import Agent",
            "from pydantic import BaseModel",
            "",
            "class ${1:ResponseModel}(BaseModel):",
            "    result: str",
            "    confidence: float",
            "    category: str",
            "",
            "agent = Agent(",
            "    '${2:openai:gpt-4o}',",
            "    result_type=${1:ResponseModel},",
            "    system_prompt='${3:You are a helpful AI assistant that provides structured responses.}'",
            ")",
            "",
            "async def ${4:process_request}(message: str) -> ${1:ResponseModel}:",
            "    result = await agent.run(message)",
            "    return result"
        ],
        "description": "Create a Pydantic AI agent with type safety"
    },
    "Python Error Handling": {
        "prefix": "agent-error-handling",
        "body": [
            "try:",
            "    ${1:# Agent operation}",
            "    result = await ${2:agent.process}(${3:input})",
            "    return result",
            "except ${4:SpecificException} as e:",
            "    logger.error(f\"Specific error: {e}\")",
            "    return \"${5:Specific error response}\"",
            "except Exception as e:",
            "    logger.error(f\"${6:Agent error}: {e}\")",
            "    return \"${7:I apologize, but I encountered an error. Please try again.}\""
        ],
        "description": "Python error handling pattern for AI agents"
    },
    "Python Agent Config": {
        "prefix": "agent-config",
        "body": [
            "from dataclasses import dataclass",
            "from typing import List, Optional",
            "import os",
            "",
            "@dataclass",
            "class AgentConfig:",
            "    name: str = \"${1:MyAgent}\"",
            "    model: str = \"${2:gpt-4o}\"",
            "    temperature: float = ${3:0.7}",
            "    max_tokens: int = ${4:1000}",
            "    system_prompt: str = \"${5:You are a helpful AI assistant.}\"",
            "    tools: Optional[List[str]] = None",
            "    memory: bool = ${6:True}",
            "",
            "# Load from environment or use defaults",
            "config = AgentConfig(",
            "    name=os.getenv(\"AGENT_NAME\", \"${1:MyAgent}\"),",
            "    model=os.getenv(\"AGENT_MODEL\", \"${2:gpt-4o}\"),",
            "    temperature=float(os.getenv(\"AGENT_TEMPERATURE\", \"${3:0.7}\")),",
            "    # Add other config overrides as needed",
            ")"
        ],
        "description": "Python agent configuration with dataclass"
    }
}